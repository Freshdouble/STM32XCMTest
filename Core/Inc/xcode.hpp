/**********************************************************************************************************************************
*
*		File: xcode.hpp
*		Date: 17 Jan 2022
*
*		This file was autogenerated using the xcode code generator.
*		Every addition to this file will be overwritten when new code is generated using the code generator.
*
*		Note: This code should only use packets with a maxsize known at compile time. So you can excpect that the GetMaxSize
*		      Memberfunction works on every packet in this file.
*
**********************************************************************************************************************************/

#ifndef USE_ETL
#define USE_ETL //Force etl to be bundeled with BaseCom because strings in this template need the etl::string implementation
#endif

#include <cstdint>
#include "BaseCom.hpp"
#include "etl/string.h"

#ifndef XCM_DEFINITIONS_HPP__
#define XCM_DEFINITIONS_HPP__

using namespace translib;

#pragma region MessageDefinitions

/********************************************************************************************************
Definitions for Status

Paket to transmit the current device status
Testcomment
********************************************************************************************************/
#pragma region STATUS
#pragma region Data1

//Bitfield with the current status
struct Status_Data1 : public Bitfield<32>
{
	static const size_t adc_initialized_Offset = 0;
	static const size_t adc_initialized_Length = 1;
	static const size_t dac_initialized_Offset = 1;
	static const size_t dac_initialized_Length = 1;
	static const size_t dma_initialized_Offset = 2;
	static const size_t dma_initialized_Length = 1;
	static const size_t flash_ssp_initialized_Offset = 3;
	static const size_t flash_ssp_initialized_Length = 1;
	static const size_t i2c0_initialized_Offset = 4;
	static const size_t i2c0_initialized_Length = 1;
	static const size_t i2c1_initialized_Offset = 5;
	static const size_t i2c1_initialized_Length = 1;
	static const size_t i2c2_initialized_Offset = 6;
	static const size_t i2c2_initialized_Length = 1;
	static const size_t uart0_initialized_Offset = 7;
	static const size_t uart0_initialized_Length = 1;
	static const size_t uart1_initialized_Offset = 8;
	static const size_t uart1_initialized_Length = 1;
	static const size_t uart2_initialized_Offset = 9;
	static const size_t uart2_initialized_Length = 1;
	static const size_t uart3_initialized_Offset = 10;
	static const size_t uart3_initialized_Length = 1;
	static const size_t rtc_initialized_Offset = 11;
	static const size_t rtc_initialized_Length = 1;
	static const size_t ssp1_initialized_Offset = 12;
	static const size_t ssp1_initialized_Length = 1;
	static const size_t structs_initialized_Offset = 13;
	static const size_t structs_initialized_Length = 1;
	static const size_t systick_initialized_Offset = 14;
	static const size_t systick_initialized_Length = 1;
	static const size_t timer1_initialized_Offset = 15;
	static const size_t timer1_initialized_Length = 1;
	static const size_t watchdog_initialized_Offset = 16;
	static const size_t watchdog_initialized_Length = 1;
	static const size_t eeprom_initialized_Offset = 17;
	static const size_t eeprom_initialized_Length = 1;
	static const size_t ars_initialized_Offset = 18;
	static const size_t ars_initialized_Length = 1;
	static const size_t power_management_initialized_Offset = 19;
	static const size_t power_management_initialized_Length = 1;
	static const size_t flash_initialized_Offset = 20;
	static const size_t flash_initialized_Length = 1;
	static const size_t seven_segment_intern_initialized_Offset = 21;
	static const size_t seven_segment_intern_initialized_Length = 1;
	static const size_t seven_segment_extern_initialized_Offset = 22;
	static const size_t seven_segment_extern_initialized_Length = 1;
	static const size_t startup_success_Offset = 23;
	static const size_t startup_success_Length = 1;
	static const size_t sensor_pressure_initialized_Offset = 24;
	static const size_t sensor_pressure_initialized_Length = 1;
	static const size_t startup_checked_Offset = 25;
	static const size_t startup_checked_Length = 1;
	static const size_t sensor_imu_initialized_Offset = 26;
	static const size_t sensor_imu_initialized_Length = 1;
	static const size_t notused1_Offset = 27;
	static const size_t notused1_Length = 1;
	static const size_t sensor_hig_initialized_Offset = 28;
	static const size_t sensor_hig_initialized_Length = 1;
	static const size_t sensor_gyro_initialized_Offset = 29;
	static const size_t sensor_gyro_initialized_Length = 1;
	static const size_t gnss_ready_Offset = 30;
	static const size_t gnss_ready_Length = 1;


	bool Read_adc_initialized()
	{
		return GetData<bool>(adc_initialized_Offset, adc_initialized_Length);
	}
	void Write_adc_initialized(bool data)
	{
		return WriteData(adc_initialized_Offset, adc_initialized_Length, data);
	}
	bool Read_dac_initialized()
	{
		return GetData<bool>(dac_initialized_Offset, dac_initialized_Length);
	}
	void Write_dac_initialized(bool data)
	{
		return WriteData(dac_initialized_Offset, dac_initialized_Length, data);
	}
	bool Read_dma_initialized()
	{
		return GetData<bool>(dma_initialized_Offset, dma_initialized_Length);
	}
	void Write_dma_initialized(bool data)
	{
		return WriteData(dma_initialized_Offset, dma_initialized_Length, data);
	}
	bool Read_flash_ssp_initialized()
	{
		return GetData<bool>(flash_ssp_initialized_Offset, flash_ssp_initialized_Length);
	}
	void Write_flash_ssp_initialized(bool data)
	{
		return WriteData(flash_ssp_initialized_Offset, flash_ssp_initialized_Length, data);
	}
	bool Read_i2c0_initialized()
	{
		return GetData<bool>(i2c0_initialized_Offset, i2c0_initialized_Length);
	}
	void Write_i2c0_initialized(bool data)
	{
		return WriteData(i2c0_initialized_Offset, i2c0_initialized_Length, data);
	}
	bool Read_i2c1_initialized()
	{
		return GetData<bool>(i2c1_initialized_Offset, i2c1_initialized_Length);
	}
	void Write_i2c1_initialized(bool data)
	{
		return WriteData(i2c1_initialized_Offset, i2c1_initialized_Length, data);
	}
	bool Read_i2c2_initialized()
	{
		return GetData<bool>(i2c2_initialized_Offset, i2c2_initialized_Length);
	}
	void Write_i2c2_initialized(bool data)
	{
		return WriteData(i2c2_initialized_Offset, i2c2_initialized_Length, data);
	}
	bool Read_uart0_initialized()
	{
		return GetData<bool>(uart0_initialized_Offset, uart0_initialized_Length);
	}
	void Write_uart0_initialized(bool data)
	{
		return WriteData(uart0_initialized_Offset, uart0_initialized_Length, data);
	}
	bool Read_uart1_initialized()
	{
		return GetData<bool>(uart1_initialized_Offset, uart1_initialized_Length);
	}
	void Write_uart1_initialized(bool data)
	{
		return WriteData(uart1_initialized_Offset, uart1_initialized_Length, data);
	}
	bool Read_uart2_initialized()
	{
		return GetData<bool>(uart2_initialized_Offset, uart2_initialized_Length);
	}
	void Write_uart2_initialized(bool data)
	{
		return WriteData(uart2_initialized_Offset, uart2_initialized_Length, data);
	}
	bool Read_uart3_initialized()
	{
		return GetData<bool>(uart3_initialized_Offset, uart3_initialized_Length);
	}
	void Write_uart3_initialized(bool data)
	{
		return WriteData(uart3_initialized_Offset, uart3_initialized_Length, data);
	}
	bool Read_rtc_initialized()
	{
		return GetData<bool>(rtc_initialized_Offset, rtc_initialized_Length);
	}
	void Write_rtc_initialized(bool data)
	{
		return WriteData(rtc_initialized_Offset, rtc_initialized_Length, data);
	}
	bool Read_ssp1_initialized()
	{
		return GetData<bool>(ssp1_initialized_Offset, ssp1_initialized_Length);
	}
	void Write_ssp1_initialized(bool data)
	{
		return WriteData(ssp1_initialized_Offset, ssp1_initialized_Length, data);
	}
	bool Read_structs_initialized()
	{
		return GetData<bool>(structs_initialized_Offset, structs_initialized_Length);
	}
	void Write_structs_initialized(bool data)
	{
		return WriteData(structs_initialized_Offset, structs_initialized_Length, data);
	}
	bool Read_systick_initialized()
	{
		return GetData<bool>(systick_initialized_Offset, systick_initialized_Length);
	}
	void Write_systick_initialized(bool data)
	{
		return WriteData(systick_initialized_Offset, systick_initialized_Length, data);
	}
	bool Read_timer1_initialized()
	{
		return GetData<bool>(timer1_initialized_Offset, timer1_initialized_Length);
	}
	void Write_timer1_initialized(bool data)
	{
		return WriteData(timer1_initialized_Offset, timer1_initialized_Length, data);
	}
	bool Read_watchdog_initialized()
	{
		return GetData<bool>(watchdog_initialized_Offset, watchdog_initialized_Length);
	}
	void Write_watchdog_initialized(bool data)
	{
		return WriteData(watchdog_initialized_Offset, watchdog_initialized_Length, data);
	}
	bool Read_eeprom_initialized()
	{
		return GetData<bool>(eeprom_initialized_Offset, eeprom_initialized_Length);
	}
	void Write_eeprom_initialized(bool data)
	{
		return WriteData(eeprom_initialized_Offset, eeprom_initialized_Length, data);
	}
	bool Read_ars_initialized()
	{
		return GetData<bool>(ars_initialized_Offset, ars_initialized_Length);
	}
	void Write_ars_initialized(bool data)
	{
		return WriteData(ars_initialized_Offset, ars_initialized_Length, data);
	}
	bool Read_power_management_initialized()
	{
		return GetData<bool>(power_management_initialized_Offset, power_management_initialized_Length);
	}
	void Write_power_management_initialized(bool data)
	{
		return WriteData(power_management_initialized_Offset, power_management_initialized_Length, data);
	}
	bool Read_flash_initialized()
	{
		return GetData<bool>(flash_initialized_Offset, flash_initialized_Length);
	}
	void Write_flash_initialized(bool data)
	{
		return WriteData(flash_initialized_Offset, flash_initialized_Length, data);
	}
	bool Read_seven_segment_intern_initialized()
	{
		return GetData<bool>(seven_segment_intern_initialized_Offset, seven_segment_intern_initialized_Length);
	}
	void Write_seven_segment_intern_initialized(bool data)
	{
		return WriteData(seven_segment_intern_initialized_Offset, seven_segment_intern_initialized_Length, data);
	}
	bool Read_seven_segment_extern_initialized()
	{
		return GetData<bool>(seven_segment_extern_initialized_Offset, seven_segment_extern_initialized_Length);
	}
	void Write_seven_segment_extern_initialized(bool data)
	{
		return WriteData(seven_segment_extern_initialized_Offset, seven_segment_extern_initialized_Length, data);
	}
	bool Read_startup_success()
	{
		return GetData<bool>(startup_success_Offset, startup_success_Length);
	}
	void Write_startup_success(bool data)
	{
		return WriteData(startup_success_Offset, startup_success_Length, data);
	}
	bool Read_sensor_pressure_initialized()
	{
		return GetData<bool>(sensor_pressure_initialized_Offset, sensor_pressure_initialized_Length);
	}
	void Write_sensor_pressure_initialized(bool data)
	{
		return WriteData(sensor_pressure_initialized_Offset, sensor_pressure_initialized_Length, data);
	}
	bool Read_startup_checked()
	{
		return GetData<bool>(startup_checked_Offset, startup_checked_Length);
	}
	void Write_startup_checked(bool data)
	{
		return WriteData(startup_checked_Offset, startup_checked_Length, data);
	}
	bool Read_sensor_imu_initialized()
	{
		return GetData<bool>(sensor_imu_initialized_Offset, sensor_imu_initialized_Length);
	}
	void Write_sensor_imu_initialized(bool data)
	{
		return WriteData(sensor_imu_initialized_Offset, sensor_imu_initialized_Length, data);
	}
	bool Read_notused1()
	{
		return GetData<bool>(notused1_Offset, notused1_Length);
	}
	void Write_notused1(bool data)
	{
		return WriteData(notused1_Offset, notused1_Length, data);
	}
	bool Read_sensor_hig_initialized()
	{
		return GetData<bool>(sensor_hig_initialized_Offset, sensor_hig_initialized_Length);
	}
	void Write_sensor_hig_initialized(bool data)
	{
		return WriteData(sensor_hig_initialized_Offset, sensor_hig_initialized_Length, data);
	}
	bool Read_sensor_gyro_initialized()
	{
		return GetData<bool>(sensor_gyro_initialized_Offset, sensor_gyro_initialized_Length);
	}
	void Write_sensor_gyro_initialized(bool data)
	{
		return WriteData(sensor_gyro_initialized_Offset, sensor_gyro_initialized_Length, data);
	}
	bool Read_gnss_ready()
	{
		return GetData<bool>(gnss_ready_Offset, gnss_ready_Length);
	}
	void Write_gnss_ready(bool data)
	{
		return WriteData(gnss_ready_Offset, gnss_ready_Length, data);
	}
};
#pragma endregion
struct Status : public ComPacket<Status_Data1>
{

	const char* id = "$RFD50";
	static constexpr std::array<uint8_t, 6> idBytes = { 36,82,70,68,53,48 };
	static constexpr size_t packetLength = 6 + GetMaxSize();
	Status_Data1& data1 = get<0>(elements);

	/**
	* @brief Checks if the id in data matches the id of this packet.
	* @tparam arraylength 
    * @param data 
    * @param datalength 
    * @param idbytes 
    * @return tuple<bool, uint8_t*, size_t> If the packet start matches the id; The beginn of the data section; The remaining bytes in the packet.
	**/
	static tuple<bool, const uint8_t*, size_t> IDMatch(const uint8_t* data,const size_t length)
	{
		return CheckIDMatch(data, length, idBytes);
	}

#ifdef USE_MEMALLOC
	/**
    * @brief Serialize the packet to an newly created vector with the specified id data before the serialized data.
    * 
    * @return unique_ptr<vector<uint8_t>> 
    */
    unique_ptr<vector<uint8_t>> SerializeWithID() const
    {
		return Serialize(idBytes);
	}
#endif

	/**
    * @brief Serialize the packet to the buffer starting at begin and ending on end.
    *
    * @tparam datalength
    * @param buffer - The array to hold the data
    * @return size_t - Byte length of the serialized data
    */
    template <const size_t datalength>
    size_t SerializeWithID(array<uint8_t, datalength> &buffer) const
    {
        return Serialize(buffer, idBytes);
    }

	/**
    * @brief Serialize the packet and returns the length of the serialized data and the data itself.
    *
    * @return std::tuple<size_t, std::array<uint8_t, packetLength>> Datalength; The data of the packet.
    */
	std::tuple<size_t, std::array<uint8_t, packetLength>> SerializeWithID() const
	{
		std::array<uint8_t, packetLength> data;
		size_t datalength = SerializeWithID(data);
		return std::make_tuple(datalength, data);
	}
};
#pragma endregion
/********************************************************************************************************/


/********************************************************************************************************
Definitions for BarometricData

********************************************************************************************************/
#pragma region BAROMETRICDATA

struct BarometricData : public ComPacket<uint32_t, double>
{

	const char* id = "$RFD30";
	static constexpr std::array<uint8_t, 6> idBytes = { 36,82,70,68,51,48 };
	static constexpr size_t packetLength = 6 + GetMaxSize();
	uint32_t& pressure = get<0>(elements);
	double& sample = get<1>(elements);

	/**
	* @brief Checks if the id in data matches the id of this packet.
	* @tparam arraylength 
    * @param data 
    * @param datalength 
    * @param idbytes 
    * @return tuple<bool, uint8_t*, size_t> If the packet start matches the id; The beginn of the data section; The remaining bytes in the packet.
	**/
	static tuple<bool, const uint8_t*, size_t> IDMatch(const uint8_t* data,const size_t length)
	{
		return CheckIDMatch(data, length, idBytes);
	}

#ifdef USE_MEMALLOC
	/**
    * @brief Serialize the packet to an newly created vector with the specified id data before the serialized data.
    * 
    * @return unique_ptr<vector<uint8_t>> 
    */
    unique_ptr<vector<uint8_t>> SerializeWithID() const
    {
		return Serialize(idBytes);
	}
#endif

	/**
    * @brief Serialize the packet to the buffer starting at begin and ending on end.
    *
    * @tparam datalength
    * @param buffer - The array to hold the data
    * @return size_t - Byte length of the serialized data
    */
    template <const size_t datalength>
    size_t SerializeWithID(array<uint8_t, datalength> &buffer) const
    {
        return Serialize(buffer, idBytes);
    }

	/**
    * @brief Serialize the packet and returns the length of the serialized data and the data itself.
    *
    * @return std::tuple<size_t, std::array<uint8_t, packetLength>> Datalength; The data of the packet.
    */
	std::tuple<size_t, std::array<uint8_t, packetLength>> SerializeWithID() const
	{
		std::array<uint8_t, packetLength> data;
		size_t datalength = SerializeWithID(data);
		return std::make_tuple(datalength, data);
	}
};
#pragma endregion
/********************************************************************************************************/


#pragma endregion

#pragma region CommandDefinitions

/********************************************************************************************************
Definitions for Shutdown

********************************************************************************************************/
#pragma region SHUTDOWN
#pragma region Argument

//
struct Shutdown_Argument : public Bitfield<8>
{
	static const size_t shutdown_Offset = 0;
	static const size_t shutdown_Length = 1;


	bool Read_shutdown()
	{
		return GetData<bool>(shutdown_Offset, shutdown_Length);
	}
	void Write_shutdown(bool data)
	{
		return WriteData(shutdown_Offset, shutdown_Length, data);
	}
};
#pragma endregion
struct Shutdown : public ComPacket<Shutdown_Argument>
{
	Shutdown_Argument& argument = get<0>(elements);
};
#pragma endregion
/********************************************************************************************************/


#pragma endregion
#endif